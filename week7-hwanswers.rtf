{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fnil\fcharset0 Avenir-Book;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red27\green31\blue34;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat11\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid102\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid103\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid104\'02\'03.;}{\levelnumbers\'01;}\fi-360\li2880\lin2880 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww14100\viewh13840\viewkind0
\deftab720
\pard\pardeftab720\sl440\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sohee Cho\
Week 7 Part 2\
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Who 
\i first introduced
\i0  canvas and in what year? And what was it 
\i used for
\i0 ?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 It was first introduced by Apple for use in their Mac OS X WebKit component in the year 2004.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 What is canvas 2d and what does 2d 
\i stand for
\i0 ?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The canvas tag/element is an HTML5 element which can be used to draw graphics using JavaScript. This element is only a container for graphics. We need to use JavaScript to actually draw the graphics.\'a0\uc0\u8232 \cb1 \
\ls1\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 2d stands for two-dimensional graphics\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 How do you 
\i define
\i0  the canvas element?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The canvas element is defined by \'93<canvas></canvas>\'94, which is added to the index.html file\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The canvas element only 
\i supports
\i0  the use of 2 other attributes 
\i aside from
\i0  the id (or class) attributes. What 
\i are they
\i0 ?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 It also supports the width and height attributes, aside from the id or class.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 What is the 
\i default
\i0  canvas size (width x height)?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The default canvas size is 300w x 150h. This is only if \'93ctx.fillRect(0,0,600,500) is set in main.js\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 If 
\i no
\i0  width or height attribute is 
\i added
\i0  to the canvas element in index.html, and 
\i no
\i0  background, width, or height properties 
\i within
\i0  the canvas element/id in the external stylesheet, or width or height in the JavaScript file, will 
\i anything
\i0  render to the page?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 No, nothing will render to the page.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 If the width and height are 
\i set
\i0  in ctx.fillRect() only, and the width and height were set to 
\i greater than
\i0  300x x 150h, like 600w x 400h, for example, what width and height of canvas would 
\i render
\i0  to the page?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 It would only render 300w x 150h. If ctx.fillRect( ) is set to anything below 300w x 150h, up to or equal to that size, that\'92s the size that will render to the page. Above that size, it will only render 300w x 150h.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 To 
\i get access
\i0  to the actual drawing interface in canvas, what do we 
\i first
\i0  need to create? And what is that 
\i exactly
\i0 ?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 In order to get access to the actual drawing interface in canvas, we need to create a 
\b context
\b0 , which is an object whose methods provide the drawing interface.\'a0\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	9.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 What are the 
\i 2
\i0  main drawing styles? What are 
\i each for
\i0  and what are they 
\i called
\i0 ?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The 2 main drawing styles are \'932d\'94 and \'93webgl\'94.\'a0\uc0\u8232 \cb1 \
\ls1\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'932d\'94 is two-dimensional graphics and \'93webgl\'94 is three-dimensional graphics through the OpenGL interface\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	10.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 How can we 
\i access
\i0  our drawing context once we have retrieved our canvas element by id? Which 
\i built-in
\i0  HTML5 canvas method does that 
\i for us
\i0  and what is it 
\i set on
\i0 ? 
\i Give me
\i0  the variable name and the value it is 
\i assigned
\i0 .\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 We can access our drawing by using the HTML5 canvas built-in \'93.getContext( )\'94 method.\'a0\uc0\u8232 \cb1 \
\ls1\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The variable name is canvas and it is given a value of \'93document.getElementById(\'93canvas\'94).\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\sa320\partightenfactor0
\ls1\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Code example:\uc0\u8232 \cb1 \
\pard\pardeftab720\li2880\sl440\partightenfactor0

\b \cf3 \cb4 const canvas = document.getElementById(\'93canvas\'94);\cb1 \uc0\u8232 \cb4 let ctx = canvas.getContext(\'932d\'94);\cb1 \uc0\u8232 \cb4 if (canvas.getContext) \{\cb1 \uc0\u8232 \cb4 	ctx = canvas.getContext(\'932d\'94);
\b0 \cf2 \strokec2 \
\pard\pardeftab720\li2880\sl440\sa320\partightenfactor0

\b \cf3 \strokec3 \} else \{\cb1 \uc0\u8232 \cb4 	const para = document.querySelector(\'93.unsupported\'94);\cb1 \uc0\u8232 \cb4 	para.textContent = `Your browser does not support HTML5 Canvas.`\'94;\cb1 \uc0\u8232 \cb4 \}
\b0 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls2\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	11.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 What are the 
\i two
\i0  primitive shapes canvas 
\i supports
\i0 ?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls2\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The two primitive shapes supported by canvas are rectangles and paths. Paths are lists of points connected by lines, just like in Adobe Illustrator.\'a0\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls2\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	12.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 How are 
\i all other shapes
\i0  (other than the primitive rectangle or path) created in canvas? And what kind of 
\i functions
\i0  help us create complex shapes?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls2\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 All other shapes are created by combining one or more paths. There are also built-in canvas path drawing functions which help us create complex shapes.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls2\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	13.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 What are the 
\i 3
\i0  built-in functions in canvas that 
\i draw
\i0  rectangles in canvas? 
\i Tell me
\i0  the function names and 
\i give me
\i0  the names of the parameters 
\i passed in
\i0  to them. Also, 
\i describe
\i0  what each parameter 
\i stands for
\i0 .\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls2\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The 3 built-in functions in canvas that draw rectangles are:\uc0\u8232 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl440\partightenfactor0
\ls2\ilvl2\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 fillRect ( )\uc0\u8232 \cb1 \
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\sl440\partightenfactor0
\ls2\ilvl3\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The parameters passed into this function are \'93x, y, width, height\'94 which are the x-axis coordinate of the upper-left corner of the rectangle, the y-axis coordinate of the upper-left corner of the rectangle, the width of the rectangle (positive values to the right and negative values to the left), the height of the rectangle (positive values are down, negative values are up)\uc0\u8232 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl440\partightenfactor0
\ls2\ilvl2\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 strokeRect ( )\uc0\u8232 \cb1 \
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\sl440\partightenfactor0
\ls2\ilvl3\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The parameters in this function are \'93x, y, width, height\'94\uc0\u8232 \cb1 \
\ls2\ilvl3\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The x is the x-axis coordinate of the rectangle\'92s starting point, the y is the y-axis coordinate of the rectangles starting point. The width is the rectangle's width, where positive values are to the right and negative is to the left. The height is the rectangle\'92s height, where positive values are down and negative are up.\uc0\u8232 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl440\partightenfactor0
\ls2\ilvl2\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 clearRect ( )\uc0\u8232 \cb1 \
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\sl440\partightenfactor0
\ls2\ilvl3\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The parameters in this function are also \'93x, y, width, height\'94\uc0\u8232 \cb1 \
\ls2\ilvl3\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The x is the x-axis coordinate of the rectangle\'92s starting point, the y is the y-axis coordinate of the rectangles starting point. The width is the rectangle's width, where positive values are to the right and negative is to the left. The height is the rectangle\'92s height, where positive values are down and negative are up.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls2\ilvl0
\i \cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	14.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Describe
\i0  what a path is in canvas.\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls2\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A path in canvas is a list of points connected by segments of lines that can be different shapes. They can be curved or not, and of different widths and colors. A path/subpath can be closed.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls2\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	15.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 What are the 
\i extra steps
\i0  to drawing paths in canvas?\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\partightenfactor0
\ls2\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 First, draw a path.\uc0\u8232 \cb1 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Use drawing commands to draw into the path.\uc0\u8232 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\sa320\partightenfactor0
\ls2\ilvl1\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Then, once a path has been created, use stroke ( ) or fill ( ) to the path to render the drawing\uc0\u8232 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \strokec2 \
}